load("@rules_cc//cc:defs.bzl", "cc_library")

_detail_hdrs = ["include/boost/thread/detail/*.hpp"]
_win32_hdrs = ["include/boost/thread/win32/*.hpp"]
_pthread_hdrs = ["include/boost/thread/pthread/*.hpp"]

constraint_setting(
    name = "threadapi",
    visibility = ["//visibility:public"],
)

constraint_value(
    name = "threadapi_pthread",
    visibility = ["//visibility:public"],
    constraint_setting = "threadapi",
)

constraint_value(
    name = "threadapi_win32",
    visibility = ["//visibility:public"],
    constraint_setting = "threadapi",
)

cc_library(
    name = "detail",
    includes = ["include"],
    hdrs = glob(_detail_hdrs),
    deps = [
        "@boost//libs/chrono",
        "@boost//libs/bind",
        "@boost//libs/tuple",
        "@boost//libs/move",
    ],
)

cc_library(
    name = "pthread_impl",
    target_compatible_with = [":threadapi_pthread"],
    includes = ["include"],
    defines = ["BOOST_THREAD_DONT_USE_CHRONO"],
    linkopts = ["-lpthread"],
    hdrs = glob(_pthread_hdrs) + ["src/pthread/once_atomic.cpp"],
    srcs = glob(["src/pthread/*.cpp"], exclude = ["src/pthread/once_atomic.cpp"]),
    deps = [
        ":thread_hdrs",
        ":detail",
        "@boost//date_time",
        "@boost//atomic",
        "@boost//smart_ptr",
        "@boost//exception",
        "@boost//optional",
        "@boost//function",
        "@boost//math",
    ],
)

cc_library(
    name = "win32_impl",
    target_compatible_with = [":threadapi_win32"],
    includes = ["include"],
    hdrs = glob(_win32_hdrs),
    srcs = glob(["src/win32/*.cpp"]),
    deps = [
        "@boost//libs/winapi",
        "@boost//libs/atomic",
        "@boost//libs/system",
        "@boost//libs/throw_exception",
        "@boost//libs/date_time",
        "@boost//libs/smart_ptr",
        "@boost//libs/chrono",
        "@boost//libs/bind",
        "@boost//libs/tuple",
        "@boost//libs/exception",
        "@boost//libs/optional",
        "@boost//libs/function",
    ],
)

cc_library(
    name = "thread_hdrs",
    visibility = ["//visibility:public"],
    includes = ["include"],
    hdrs = glob(["include/boost/**/*.hpp"], exclude = _detail_hdrs + _win32_hdrs + _pthread_hdrs),
    defines = ["BOOST_ALL_NO_LIB", "BOOST_THREAD_BUILD_LIB", "BOOST_THREAD_USE_LIB"],
)

cc_library(
    name = "thread",
    visibility = ["//visibility:public"],
    includes = ["include"],
    srcs = glob(["src/*.cpp"]),
    defines = ["BOOST_ALL_NO_LIB", "BOOST_THREAD_BUILD_LIB", "BOOST_THREAD_USE_LIB"],
    deps = [
        ":detail",
        ":thread_hdrs",
        "@boost//core",
        "@boost//system",
        "@boost//type_traits",
        "@boost//date_time",
        "@boost//exception",
        "@boost//optional",
        "@boost//function",
    ] + select({
        ":threadapi_win32": [":win32_impl"],
        ":threadapi_pthread": [":pthread_impl"],
    }),
)

# These platforms are only for the CI. You must define your own platforms for
# your project
platform(
    name = "ci_windows",
    constraint_values = [
        ":threadapi_win32",
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        "@bazel_tools//tools/cpp:msvc",
    ],
)

platform(
    name = "ci_linux",
    constraint_values = [
        ":threadapi_pthread",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
        "@bazel_tools//tools/cpp:gcc",
    ],
)
